/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type ActiveStyle = {
  _id: string;
  _type: "activeStyle";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  activeConfigLight?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lightTheme";
  };
  activeConfigDark?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "darkTheme";
  };
  activeTypography?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "typography";
  };
  activeLayout?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "layoutSettings";
  };
};

export type LayoutSettings = {
  _id: string;
  _type: "layoutSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  maxWidth?: "768px" | "1024px" | "1280px" | "1536px" | "100%" | "custom";
  customMaxWidth?: string;
};

export type Typography = {
  _id: string;
  _type: "typography";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  sansSerifFont?: "Inter" | "Roboto" | "Open Sans" | "Poppins" | "Arial" | "Helvetica";
  serifFont?: "Merriweather" | "Playfair Display" | "Georgia" | "Times New Roman" | "Crimson Text" | "Lora";
  monospaceFont?: "Fira Code" | "Source Code Pro" | "Monaco" | "Consolas" | "JetBrains Mono" | "Courier New";
  fontSize?: {
    mobile?: number;
    desktop?: number;
  };
  lineHeight?: number;
};

export type DarkTheme = {
  _id: string;
  _type: "darkTheme";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  primaryColor?: Color;
  secondaryColor?: Color;
  backgroundColor?: Color;
  surfaceColor?: Color;
  textColor?: Color;
  borderColor?: Color;
};

export type LightTheme = {
  _id: string;
  _type: "lightTheme";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  primaryColor?: Color;
  secondaryColor?: Color;
  backgroundColor?: Color;
  surfaceColor?: Color;
  textColor?: Color;
  borderColor?: Color;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
}>;

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  body?: BlockContent;
};

export type About = {
  _id: string;
  _type: "about";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = ActiveStyle | LayoutSettings | Typography | DarkTheme | LightTheme | BlockContent | Post | About | Color | RgbaColor | HsvaColor | HslaColor | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../astro-app/src/utils/sanity.ts
// Variable: DARK_THEME_QUERY
// Query: *[_type == "activeStyle"][0].activeConfigDark->{  "primaryColor": primaryColor.hex,  "secondaryColor": secondaryColor.hex,  "backgroundColor": backgroundColor.hex,  "surfaceColor": surfaceColor.hex,  "textColor": textColor.hex,  "borderColor": borderColor.hex}
export type DARK_THEME_QUERYResult = {
  primaryColor: string | null;
  secondaryColor: string | null;
  backgroundColor: string | null;
  surfaceColor: string | null;
  textColor: string | null;
  borderColor: string | null;
} | null;
// Variable: LIGHT_THEME_QUERY
// Query: *[_type == "activeStyle"][0].activeConfigLight->{  "primaryColor": primaryColor.hex,  "secondaryColor": secondaryColor.hex,  "backgroundColor": backgroundColor.hex,  "surfaceColor": surfaceColor.hex,  "textColor": textColor.hex,  "borderColor": borderColor.hex}
export type LIGHT_THEME_QUERYResult = {
  primaryColor: string | null;
  secondaryColor: string | null;
  backgroundColor: string | null;
  surfaceColor: string | null;
  textColor: string | null;
  borderColor: string | null;
} | null;
// Variable: TYPOGRAPHY_QUERY
// Query: *[_type == "activeStyle"][0].activeTypography->{  sansSerifFont,  serifFont,  monospaceFont,  fontSize,  lineHeight}
export type TYPOGRAPHY_QUERYResult = {
  sansSerifFont: "Arial" | "Helvetica" | "Inter" | "Open Sans" | "Poppins" | "Roboto" | null;
  serifFont: "Crimson Text" | "Georgia" | "Lora" | "Merriweather" | "Playfair Display" | "Times New Roman" | null;
  monospaceFont: "Consolas" | "Courier New" | "Fira Code" | "JetBrains Mono" | "Monaco" | "Source Code Pro" | null;
  fontSize: {
    mobile?: number;
    desktop?: number;
  } | null;
  lineHeight: number | null;
} | null;
// Variable: LAYOUT_SETTINGS_QUERY
// Query: *[_type == "activeStyle"][0].activeLayout->{  maxWidth,  customMaxWidth}
export type LAYOUT_SETTINGS_QUERYResult = {
  maxWidth: "100%" | "1024px" | "1280px" | "1536px" | "768px" | "custom" | null;
  customMaxWidth: string | null;
} | null;
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)] | order(_createdAt desc)
export type POSTS_QUERYResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  body?: BlockContent;
}>;
// Variable: POST_BY_SLUG_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]
export type POST_BY_SLUG_QUERYResult = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  body?: BlockContent;
} | null;
// Variable: ABOUT_QUERY
// Query: *[_type == "about"][0]
export type ABOUT_QUERYResult = {
  _id: string;
  _type: "about";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"activeStyle\"][0].activeConfigDark->{\n  \"primaryColor\": primaryColor.hex,\n  \"secondaryColor\": secondaryColor.hex,\n  \"backgroundColor\": backgroundColor.hex,\n  \"surfaceColor\": surfaceColor.hex,\n  \"textColor\": textColor.hex,\n  \"borderColor\": borderColor.hex\n}": DARK_THEME_QUERYResult;
    "*[_type == \"activeStyle\"][0].activeConfigLight->{\n  \"primaryColor\": primaryColor.hex,\n  \"secondaryColor\": secondaryColor.hex,\n  \"backgroundColor\": backgroundColor.hex,\n  \"surfaceColor\": surfaceColor.hex,\n  \"textColor\": textColor.hex,\n  \"borderColor\": borderColor.hex\n}": LIGHT_THEME_QUERYResult;
    "*[_type == \"activeStyle\"][0].activeTypography->{\n  sansSerifFont,\n  serifFont,\n  monospaceFont,\n  fontSize,\n  lineHeight\n}": TYPOGRAPHY_QUERYResult;
    "*[_type == \"activeStyle\"][0].activeLayout->{\n  maxWidth,\n  customMaxWidth\n}": LAYOUT_SETTINGS_QUERYResult;
    "*[_type == \"post\" && defined(slug.current)] | order(_createdAt desc)": POSTS_QUERYResult;
    "*[_type == \"post\" && slug.current == $slug][0]": POST_BY_SLUG_QUERYResult;
    "*[_type == \"about\"][0]": ABOUT_QUERYResult;
  }
}
